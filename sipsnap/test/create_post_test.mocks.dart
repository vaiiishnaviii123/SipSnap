// Mocks generated by Mockito 5.4.4 from annotations
// in sipsnap/test/create_post_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sipsnap/models/community_posts_model.dart' as _i3;
import 'package:sipsnap/models/recipe_posts_model.dart' as _i6;
import 'package:sipsnap/view_model/community_posts_provider.dart' as _i2;
import 'package:sipsnap/view_model/recipe_posts_provider.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CommunityPostsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommunityPostsProvider extends _i1.Mock
    implements _i2.CommunityPostsProvider {
  MockCommunityPostsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.CommunityPost> get communityPosts => (super.noSuchMethod(
        Invocation.getter(#communityPosts),
        returnValue: <_i3.CommunityPost>[],
      ) as List<_i3.CommunityPost>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addCommunityPost(_i3.CommunityPost? post) => super.noSuchMethod(
        Invocation.method(
          #addCommunityPost,
          [post],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.CommunityPost> listAllPosts() => (super.noSuchMethod(
        Invocation.method(
          #listAllPosts,
          [],
        ),
        returnValue: <_i3.CommunityPost>[],
      ) as List<_i3.CommunityPost>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RecipePostsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipePostsProvider extends _i1.Mock
    implements _i5.RecipePostsProvider {
  MockRecipePostsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.RecipePost> get recipePosts => (super.noSuchMethod(
        Invocation.getter(#recipePosts),
        returnValue: <_i6.RecipePost>[],
      ) as List<_i6.RecipePost>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addRecipePost(_i6.RecipePost? post) => super.noSuchMethod(
        Invocation.method(
          #addRecipePost,
          [post],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
